package main

import (
	"fmt"
	"math/rand"
	"strings"
	"time"
	"unicode"
)

// -------------------- Types --------------------

type Item struct {
	Nom      string
	Quantite int
}

type Equipment struct {
	Tete  string
	Pieds string
}

type Character struct {
	Nom             string
	Classe          string
	Niveau          int
	Pv              int
	PvMax           int
	Attaque         int
	Argent          int // argent ¬´¬£¬ª
	Pieces          int // pi√®ces d'or (pour le forgeron)
	Inventaire      []Item
	MaxInv          int
	Capacite        string
	Backpack        bool
	Equipement      Equipment
	TempAttackBoost int  // montant ajout√© temporairement (ex: Coca)
	TempBoostTurns  int  // tours restants pour le boost temporaire
	CasquetteDelay  int  // tours restants avant activation de la casquette
	CasquetteActive bool // si l'effet casquette est d√©j√† appliqu√©
	HasAsicsEffect  bool // si Asics est √©quip√© (effet √† d√©clencher en combat)
	Tour            int
}

type Monster struct {
	Nom     string
	PvMax   int
	Pv      int
	Attaque int
}

// -------------------- Utilitaires Texte --------------------

func typewriterPrint(text string, delay time.Duration, color string) {
	reset := "\033[0m"
	fmt.Print(color)
	for _, c := range text {
		fmt.Printf("%c", c)
		time.Sleep(delay)
	}
	fmt.Println(reset)
}

func colorPrintln(color, s string) {
	reset := "\033[0m"
	fmt.Print(color)
	fmt.Println(s)
	fmt.Print(reset)
}

// -------------------- Initialisation personnages --------------------

func CreateCharacters() []Character {
	return []Character{
		{
			Nom:        "Le Codeur",
			Classe:     "√âl√®ve",
			Niveau:     1,
			Pv:         75,
			PvMax:      200,
			Attaque:    75,
			Argent:     20,
			Pieces:     0,
			Inventaire: make([]Item, 0, 5),
			MaxInv:     5,
			Capacite:   "Objet al√©atoire : Carte graphique (-10 PV) ou Chargeur iPhone 16 (-30 PV).",
		},
		{
			Nom:        "L'Ing√©nieur",
			Classe:     "√âl√®ve",
			Niveau:     1,
			Pv:         100,
			PvMax:      200,
			Attaque:    50,
			Argent:     20,
			Pieces:     0,
			Inventaire: make([]Item, 0, 5),
			MaxInv:     5,
			Capacite:   "Inflige +10 d√©g√¢ts suppl√©mentaires √† chaque combat.",
		},
		{
			Nom:        "Le Trackeur",
			Classe:     "√âl√®ve",
			Niveau:     1,
			Pv:         50,
			PvMax:      200,
			Attaque:    100,
			Argent:     20,
			Pieces:     0,
			Inventaire: make([]Item, 0, 5),
			MaxInv:     5,
			Capacite:   "1 chance sur 3 de doubler son attaque (‚ö° KAMEAMEAMEAMEA !).",
		},
	}
}

// -------------------- Building ASCII --------------------

func printCampusBig() {
	fmt.Println("\033[1;33m") // jaune gras
	fmt.Println(`
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñà  []  []  []  []  []  []  []  []  []  []  []  []  []  []  ‚ñà
‚ñà  []  []  []  []  []  []  []  []  []  []  []  []  []  []  ‚ñà
‚ñà  []  []  []  []  []  []  []  []  []  []  []  []  []  []  ‚ñà
‚ñà  []  []  []  []  []  []  []  []  []  []  []  []  []  []  ‚ñà
‚ñà  []  []  []  []  []  []  []  []  []  []  []  []  []  []  ‚ñà
‚ñà  []  []  []  []  []  []  []  []  []  []  []  []  []  []  ‚ñà
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
           ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
           ‚îÇ           [  DOOR  ]        ‚îÇ
           ‚îÇ          (√©l√®ve attend)    ‚îÇ
           ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
`)
	fmt.Println("\033[0m")
}

// -------------------- Narration & Intro --------------------

func introduction() {
	printCampusBig()
	typewriterPrint("Tu as cinq √©tages √† franchir, cinq niveaux pour t‚Äô√©chapper.", 30*time.Millisecond, "\033[36m")
	typewriterPrint("Les personnalit√©s de l'√©cole ‚Äî B1, B2, B3, M1, M2 ‚Äî t‚Äôattendent.", 30*time.Millisecond, "\033[36m")
	typewriterPrint("Tout commence √† l'accueil, o√π tu choisis ton personnage...", 30*time.Millisecond, "\033[36m")
	typewriterPrint("Choisis-le bien et gare √† toi !", 30*time.Millisecond, "\033[36m")
	typewriterPrint("Les 5 monstres que tu vas affronter sont d‚Äôanciens √©l√®ves bloqu√©s dans le pass√©,", 30*time.Millisecond, "\033[36m")
	typewriterPrint("√† cause de la faille spatio-temporelle cr√©√©e lorsque Cyril et Bastien", 30*time.Millisecond, "\033[36m")
	typewriterPrint("ont fusionn√© leurs PC et d√©clench√© une boucle √† remonter le temps.", 30*time.Millisecond, "\033[36m")
	typewriterPrint("Il ne te reste que quelques heures pour r√©cup√©rer ton Saint Dipl√¥me √† temps et sauver l'humanit√©.", 30*time.Millisecond, "\033[36m")

	// laisser la phrase finale EXACTE comme demand√©
	typewriterPrint("Nous comptons sur toi jeune Skylanders.. Euhh √©leve de Ynov !!!", 40*time.Millisecond, "\033[1;31m")
}

// -------------------- Gestion Nom perso --------------------

func characterCreation(p Character) Character {
	var nom string
	for {
		fmt.Print("‚úèÔ∏è  Choisis un nom pour ton personnage : ")
		fmt.Scan(&nom)

		valid := true
		for _, r := range nom {
			if !unicode.IsLetter(r) {
				valid = false
				break
			}
		}
		if !valid || len(nom) == 0 {
			fmt.Println("‚ùå Le nom ne doit contenir que des lettres.")
			continue
		}
		nom = strings.ToLower(nom)
		nom = strings.Title(nom)
		p.Nom = nom
		break
	}
	return p
}

// -------------------- Affichage & Inventaire g√©n√©ral --------------------

func (p Character) DisplayInfo() {
	fmt.Println("\n\033[1;35m‚òÜ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚òÜ Information du Personnage ‚òÜ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚òÜ\033[0m")
	fmt.Printf("\t- Nom       : %s\n", p.Nom)
	fmt.Printf("\t- Classe    : %s\n", p.Classe)
	fmt.Printf("\t- Niveau    : %d\n", p.Niveau)
	fmt.Printf("\t- PV        : %d/%d\n", p.Pv, p.PvMax)
	fmt.Printf("\t- Attaque   : %d\n", p.Attaque)
	if p.TempAttackBoost != 0 {
		fmt.Printf("\t  (Boost temporaire actuel : +%d, tours restants : %d)\n", p.TempAttackBoost, p.TempBoostTurns)
	}
	if p.CasquetteActive {
		fmt.Println("\t  (Casquette Gucci active : +20% attaque)")
	}
	fmt.Printf("\t- Argent    : %d¬£\n", p.Argent)
	fmt.Printf("\t- Pi√®ces    : %d\n", p.Pieces)
	fmt.Printf("\t- Capacit√©  : %s\n", p.Capacite)
	fmt.Printf("\t- Inventaire: %d/%d\n", len(p.Inventaire), p.MaxInv)
	fmt.Printf("\t- √âquipement: T√™te=%s, Pieds=%s\n", p.Equipement.Tete, p.Equipement.Pieds)
	if len(p.Inventaire) == 0 {
		fmt.Println("\t   (Vide)")
	} else {
		for _, it := range p.Inventaire {
			fmt.Printf("\t   - %s x%d\n", it.Nom, it.Quantite)
		}
	}
}

// ajoute un item √† l'inventaire (respecte la capacit√©), retourne true si ajout√©
func (p *Character) AddInventory(nom string, quantite int) bool {
	for i := range p.Inventaire {
		if p.Inventaire[i].Nom == nom {
			p.Inventaire[i].Quantite += quantite
			return true
		}
	}
	if len(p.Inventaire) >= p.MaxInv {
		return false
	}
	p.Inventaire = append(p.Inventaire, Item{Nom: nom, Quantite: quantite})
	return true
}

// retire un item, retourne true si r√©ussi
func (p *Character) RemoveInventory(nom string, quantite int) bool {
	for i := range p.Inventaire {
		if p.Inventaire[i].Nom == nom {
			if p.Inventaire[i].Quantite >= quantite {
				p.Inventaire[i].Quantite -= quantite
				if p.Inventaire[i].Quantite == 0 {
					p.Inventaire = append(p.Inventaire[:i], p.Inventaire[i+1:]...)
				}
				return true
			}
			return false
		}
	}
	return false
}

func (p *Character) HasItem(nom string) bool {
	for _, it := range p.Inventaire {
		if it.Nom == nom {
			return true
		}
	}
	return false
}

// -------------------- Effets / Utilisation objets --------------------

func (p *Character) UseRedBull() {
	if !p.RemoveInventory("RedBull", 1) {
		fmt.Println("‚ùå Tu n'as pas de RedBull.")
		return
	}
	heal := 50
	if p.Pv+heal > p.PvMax {
		p.Pv = p.PvMax
	} else {
		p.Pv += heal
	}
	fmt.Printf("üíñ RedBull consomm√© ! PV : %d/%d\n", p.Pv, p.PvMax)
}

func (p *Character) UseCoca() {
	if !p.RemoveInventory("Coca bien frais Chakal", 1) {
		fmt.Println("‚ùå Tu n'as pas de Coca bien frais Chakal.")
		return
	}
	bonus := int(float64(p.Attaque) * 0.10)
	if bonus < 1 {
		bonus = 1
	}
	p.TempAttackBoost += bonus
	p.Attaque += bonus
	p.TempBoostTurns = 1 // valable 1 tour de combat (sera d√©cr√©ment√© dans boucle de combat)
	fmt.Printf("ü•§ Coca utilis√© ! Attaque boost√©e de +%d pour 1 tour (Attaque = %d)\n", bonus, p.Attaque)
}

func (p *Character) UseKambucha() {
	if !p.RemoveInventory("Bouteille de Kambucha alcoolis√© √† 2%", 1) {
		fmt.Println("‚ùå Tu n'as pas de Kambucha.")
		return
	}
	heal := 30
	if p.Pv+heal > p.PvMax {
		p.Pv = p.PvMax
	} else {
		p.Pv += heal
	}
	fmt.Printf("üçπ Kambucha utilis√© ! PV : %d/%d\n", p.Pv, p.PvMax)
}

func (p *Character) PoisonPot() {
	// applique un effet poison sur le joueur (utilis√© pour test)
	fmt.Println("‚ò†Ô∏è Poison activ√©...")
	for sec := 1; sec <= 3; sec++ {
		time.Sleep(1 * time.Second)
		p.Pv -= 10
		if p.Pv < 0 {
			p.Pv = 0
		}
		fmt.Printf("üíÄ Poison - %ds : PV %d/%d\n", sec, p.Pv, p.PvMax)
	}
}

// equiper un √©quipement (depuis inventaire) : retire de l'inventaire et update Equipement
func (p *Character) EquipFromInventory(nom string) {
	switch nom {
	case "Casquette Gucci":
		if !p.RemoveInventory(nom, 1) {
			fmt.Println("‚ùå Tu n'as pas de Casquette Gucci dans l'inventaire.")
			return
		}
		if p.Equipement.Tete != "" {
			fmt.Println("‚ùå Tu as d√©j√† un √©quipement en t√™te (retire-le d'abord).")
			return
		}
		p.Equipement.Tete = nom
		p.CasquetteDelay = 3 // s'activera apr√®s 3 tours de combat
		p.CasquetteActive = false
		fmt.Println("‚úÖ Casquette Gucci √©quip√©e ! Effet : +20% d'attaque √† partir du 3e tour.")
	case "Asics Kayano":
		if !p.RemoveInventory(nom, 1) {
			fmt.Println("‚ùå Tu n'as pas d'Asics Kayano dans l'inventaire.")
			return
		}
		if p.Equipement.Pieds != "" {
			fmt.Println("‚ùå Tu as d√©j√† un √©quipement aux pieds.")
			return
		}
		p.Equipement.Pieds = nom
		p.HasAsicsEffect = true
		fmt.Println("‚úÖ Asics Kayano √©quip√©es aux pieds ! Effet : bloque l‚Äôennemi 1 tour (√† d√©clencher en combat).")
	default:
		fmt.Println("‚ùå Cet objet n'est pas √©quipable.")
	}
}

// -------------------- Menus : Marchand & Forgeron --------------------

func (p *Character) MerchantMenu() {
	for {
		fmt.Println()
		fmt.Print("\033[1;33m")
		fmt.Println("‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ  Marchand du Campus  ‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì")
		fmt.Print("\033[0m")

		fmt.Print("\033[32m")
		fmt.Println("\t1 - RedBull (+50 PV) - 10¬£")
		fmt.Println("\t2 - Coca bien frais Chakal (+10% attaque / 1 tour) - 15¬£")
		fmt.Println("\t3 - Caf√© dilu√© au Ciao Kambucha (Poison -10PV/s 3s) - 20¬£")
		fmt.Println("\t4 - Sac √† dos perdu (+5 places inventaire) - 30¬£")
		fmt.Println("\t0 - Retour")
		fmt.Print("\033[0m")

		fmt.Printf("üí∞ Argent : %d¬£\n", p.Argent)
		fmt.Print("Choix : ")
		var choix int
		fmt.Scan(&choix)

		switch choix {
		case 1:
			if p.Argent < 10 {
				fmt.Println("‚ùå Pas assez d'argent pour acheter RedBull.")
			} else {
				if ok := p.AddInventory("RedBull", 1); ok {
					p.Argent -= 10
					fmt.Println("‚úÖ Achat : RedBull (ajout√© √† l'inventaire).")
				} else {
					fmt.Println("‚ùå Inventaire plein, impossible d'acheter.")
				}
			}
		case 2:
			if p.Argent < 15 {
				fmt.Println("‚ùå Pas assez d'argent pour acheter le Coca.")
			} else {
				if ok := p.AddInventory("Coca bien frais Chakal", 1); ok {
					p.Argent -= 15
					fmt.Println("‚úÖ Achat : Coca bien frais Chakal (ajout√© √† l'inventaire).")
				} else {
					fmt.Println("‚ùå Inventaire plein, impossible d'acheter.")
				}
			}
		case 3:
			if p.Argent < 20 {
				fmt.Println("‚ùå Pas assez d'argent pour acheter le Caf√© dilu√©.")
			} else {
				if ok := p.AddInventory("Caf√© dilu√© au Ciao Kambucha", 1); ok {
					p.Argent -= 20
					fmt.Println("‚úÖ Achat : Caf√© dilu√© au Ciao Kambucha (ajout√© √† l'inventaire).")
				} else {
					fmt.Println("‚ùå Inventaire plein, impossible d'acheter.")
				}
			}
		case 4:
			if p.Backpack {
				fmt.Println("üéí Tu poss√®des d√©j√† le Sac √† dos perdu.")
			} else if p.Argent < 30 {
				fmt.Println("‚ùå Pas assez d'argent pour acheter le Sac √† dos perdu.")
			} else {
				p.Argent -= 30
				p.Backpack = true
				p.MaxInv = 10
				fmt.Println("‚úÖ Achat : Sac √† dos perdu. Inventaire √©tendu √† 10 emplacements.")
			}
		case 0:
			return
		default:
			fmt.Println("Choix invalide.")
		}
	}
}

func (p *Character) BlacksmithMenu() {
	for {
		fmt.Println()
		fmt.Print("\033[1;36m")
		fmt.Println("‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ  Forgeron  ‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì")
		fmt.Print("\033[0m")

		fmt.Print("\033[32m")
		fmt.Println("\t1 - Casquette Gucci (60 pi√®ces) [+20% attaque √† partir du 3e tour]")
		fmt.Println("\t2 - Asics Kayano (60 pi√®ces) [emp√™che le monstre de jouer 1 tour]")
		fmt.Println("\t0 - Retour")
		fmt.Print("\033[0m")

		fmt.Printf("‚ö†Ô∏è Pour acheter et √©quiper, tu dois poss√©der l'objet 'flow du contr√¥leur RATP'.\n")
		fmt.Printf("üí∞ Pi√®ces : %d\n", p.Pieces)
		fmt.Print("Choix : ")
		var choix int
		fmt.Scan(&choix)

		switch choix {
		case 1:
			if p.Pieces < 60 {
				fmt.Println("‚ùå Pas assez de pi√®ces pour la Casquette Gucci.")
				continue
			}
			if !p.HasItem("flow du contr√¥leur RATP") {
				fmt.Println("‚ùå Il te manque 'flow du contr√¥leur RATP' pour acheter/√©quiper cet √©quipement.")
				continue
			}
			if ok := p.AddInventory("Casquette Gucci", 1); !ok {
				fmt.Println("‚ùå Inventaire plein, impossible d'ajouter la Casquette Gucci.")
				continue
			}
			p.Pieces -= 60
			fmt.Println("‚úÖ Tu as fabriqu√© la Casquette Gucci (ajout√©e √† l'inventaire).")
		case 2:
			if p.Pieces < 60 {
				fmt.Println("‚ùå Pas assez de pi√®ces pour les Asics Kayano.")
				continue
			}
			if !p.HasItem("flow du contr√¥leur RATP") {
				fmt.Println("‚ùå Il te manque 'flow du contr√¥leur RATP' pour acheter/√©quiper cet √©quipement.")
				continue
			}
			if ok := p.AddInventory("Asics Kayano", 1); !ok {
				fmt.Println("‚ùå Inventaire plein, impossible d'ajouter Asics Kayano.")
				continue
			}
			p.Pieces -= 60
			fmt.Println("‚úÖ Tu as fabriqu√© les Asics Kayano (ajout√©es √† l'inventaire).")
		case 0:
			return
		default:
			fmt.Println("Choix invalide.")
		}
	}
}

// -------------------- Inventaire : affichage et utilisation --------------------

func (p *Character) AccessInventoryMenu() {
	fmt.Println()
	fmt.Print("\033[1;33m")
	fmt.Println("‚ï≠‚îÄ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÄ‚ïØ  Inventaire  ‚ï∞‚îÄ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÄ‚ïÆ")
	fmt.Print("\033[0m")

	if len(p.Inventaire) == 0 {
		fmt.Println("\tInventaire vide")
		return
	}
	for i, it := range p.Inventaire {
		fmt.Printf("\t%d - %s x%d\n", i+1, it.Nom, it.Quantite)
	}
	fmt.Printf("\t0 - Retour\n")

	var choix int
	fmt.Print("Choisis un objet (num√©ro) pour l'utiliser / √©quiper : ")
	fmt.Scan(&choix)

	if choix == 0 {
		return
	}
	if choix < 1 || choix > len(p.Inventaire) {
		fmt.Println("Choix invalide.")
		return
	}
	name := p.Inventaire[choix-1].Nom

	switch name {
	case "RedBull":
		p.UseRedBull()
	case "Coca bien frais Chakal":
		p.UseCoca()
	case "Caf√© dilu√© au Ciao Kambucha":
		// on applique poison sur le joueur (ou sur ennemi si en combat, ici hors combat on montre l'effet)
		fmt.Println("‚ö†Ô∏è Le Caf√© dilu√© est toxique √† consommer hors combat. Ne l'utilise pas maintenant.")
	case "Bouteille de Kambucha alcoolis√© √† 2%":
		p.UseKambucha()
	case "Casquette Gucci":
		p.EquipFromInventory("Casquette Gucci")
	case "Asics Kayano":
		p.EquipFromInventory("Asics Kayano")
	case "flow du contr√¥leur RATP":
		fmt.Println("Ceci est un composant sp√©cial pour le Forgeron.")
	default:
		fmt.Println("Objet non reconnu / utilisation non impl√©ment√©e.")
	}
}

// -------------------- Combat : Goblin (ClasseInfobug√©) --------------------

func InitGoblin() Monster {
	return Monster{Nom: "ClasseInfobug√©", PvMax: 115, Pv: 115, Attaque: 20}
}

func GoblinPattern(monstre *Monster, player *Character, tour int) {
	attack := monstre.Attaque
	if tour%3 == 0 {
		attack = int(float64(monstre.Attaque) * 1.2)
	}
	cris := []string{"Lanc√© de carte graphique", "Lanc√© de souris", "Lanc√© de clavier"}
	cri := cris[rand.Intn(len(cris))]
	fmt.Printf("\n%s crie \"%s\" !\n", monstre.Nom, cri)

	// si joueur a Asics effect (emp√™che une action), handle in CharacterTurn when player triggers it.
	player.Pv -= attack
	if player.Pv < 0 {
		player.Pv = 0
	}
	fmt.Printf("%s inflige √† %s %d d√©g√¢ts !\n", monstre.Nom, player.Nom, attack)
	fmt.Printf("%s PV : %d/%d\n", player.Nom, player.Pv, player.PvMax)
}

func CharacterTurn(monstre *Monster, player *Character, tour *int, monsterSkipped *bool) {
	fmt.Println("\n--- Ton tour ---")
	fmt.Println("1 - Attaquer")
	fmt.Println("2 - Inventaire")
	fmt.Println("3 - Utiliser Asics (si √©quip√©) [bloque l'ennemi 1 tour]")
	fmt.Print("Choix : ")
	var choix int
	fmt.Scan(&choix)
	switch choix {
	case 1:
		// Attaque basique - tenir compte si casquette active => l'effet casquette s'applique via CasquetteActive field
		damage := player.Attaque
		fmt.Printf("%s utilise Attaque basique et inflige %d d√©g√¢ts !\n", player.Nom, damage)
		monstre.Pv -= damage
		if monstre.Pv < 0 {
			monstre.Pv = 0
		}
		fmt.Printf("%s PV : %d/%d\n", monstre.Nom, monstre.Pv, monstre.PvMax)
	case 2:
		// Acc√®s √† l'inventaire (utilisation d'objets en combat)
		player.AccessInventoryCombat()
	case 3:
		// utiliser Asics si √©quip√©
		if player.Equipement.Pieds == "Asics Kayano" && player.HasAsicsEffect {
			*monsterSkipped = true
			player.HasAsicsEffect = false // effet consomm√© (ou garder selon design)
			fmt.Println("üëü Tu actives Asics Kayano : le monstre est bloqu√© pour 1 tour !")
		} else {
			fmt.Println("‚ùå Tu n'as pas Asics Kayano √©quip√©es ou l'effet n'est pas disponible.")
		}
	default:
		fmt.Println("Choix invalide, tu perds ton action.")
	}
	// fin du turn du joueur, on d√©cr√©mente les tours boost si actifs (mais revert apr√®s le tour du monstre)
	// CasquetteDelay est g√©r√©e dans boucle de combat
	_ = tour
}

func (p *Character) AccessInventoryCombat() {
	if len(p.Inventaire) == 0 {
		fmt.Println("Inventaire vide.")
		return
	}
	fmt.Println("Inventaire :")
	for i, it := range p.Inventaire {
		fmt.Printf("%d - %s x%d\n", i+1, it.Nom, it.Quantite)
	}
	fmt.Print("Choisis un objet (num√©ro) : ")
	var choix int
	fmt.Scan(&choix)
	if choix < 1 || choix > len(p.Inventaire) {
		fmt.Println("Choix invalide.")
		return
	}
	switch p.Inventaire[choix-1].Nom {
	case "RedBull":
		p.UseRedBull()
	case "Bouteille de Kambucha alcoolis√© √† 2%":
		p.UseKambucha()
	case "Coca bien frais Chakal":
		p.UseCoca()
	case "Caf√© dilu√© au Ciao Kambucha":
		fmt.Println("‚ò†Ô∏è Tu lances le Caf√© dilu√© sur l'ennemi (poison) ! (impl√©mentation simplifi√©e)")
		// appliquer poison de test sur le monstre via un petit loop: pour simplifier, on applique direct damage here
		// but since monstre passed by pointer in caller, we cannot access it here; in combat we handle using AccessInventoryCombat from CharacterTurn when relevant.
	default:
		fmt.Println("Objet non utilisable en combat.")
	}
}

// TrainingFight : le combat d'entra√Ænement contre la ClasseInfobug√©
func TrainingFight(player *Character) {
	monstre := InitGoblin()
	tour := 1
	monsterSkipped := false
	fmt.Println("\n‚öîÔ∏è D√©but du combat d'entra√Ænement contre", monstre.Nom, "!")
	for player.Pv > 0 && monstre.Pv > 0 {
		fmt.Printf("\n======== Tour %d ========\n", tour)

		// Si casquette √©quip√©e et pas encore active, d√©cr√©mente et active si n√©cessaire
		if player.Equipement.Tete == "Casquette Gucci" && !player.CasquetteActive {
			if player.CasquetteDelay > 0 {
				fmt.Printf("(Casquette Gucci : %d tours avant activation)\n", player.CasquetteDelay)
				player.CasquetteDelay--
				if player.CasquetteDelay == 0 {
					// activer l'effet : +20% attaque
					bonus := int(float64(player.Attaque) * 0.20)
					if bonus < 1 {
						bonus = 1
					}
					player.Attaque += bonus
					player.CasquetteActive = true
					fmt.Printf("üß¢ Casquette Gucci s'active ! Attaque augment√©e de +%d (Attaque = %d)\n", bonus, player.Attaque)
				}
			}
		}

		// Tour du joueur
		CharacterTurn(&monstre, player, &tour, &monsterSkipped)
		if monstre.Pv <= 0 {
			break
		}

		// Tour du monstre (sauf si joueur a appliqu√© Asics -> monsterSkipped true)
		if monsterSkipped {
			fmt.Println("\nLe monstre est bloqu√© ce tour, il ne peut pas attaquer.")
			monsterSkipped = false
		} else {
			GoblinPattern(&monstre, player, tour)
		}

		// Apr√®s l'attaque du monstre, g√©rer la dur√©e du boost Coca
		if player.TempBoostTurns > 0 {
			player.TempBoostTurns--
			if player.TempBoostTurns == 0 {
				// revert boost
				player.Attaque -= player.TempAttackBoost
				fmt.Printf("ü•§ Effet Coca termin√©. Attaque revenue √† %d\n", player.Attaque)
				player.TempAttackBoost = 0
			}
		}

		// v√©rifier si joueur mort
		if player.Pv <= 0 {
			break
		}
		tour++
	}

	// R√©sultat du combat
	if player.Pv <= 0 {
		fmt.Println("\n‚ùå Tu es vaincu... Retour au menu principal.")
		// optionnel : restaurer PV partiellement ou renvoyer au menu
	} else {
		fmt.Println("\nüéâ Yesss mon gat√© c'est gagn√© ! EZ la classe")
		player.Pieces += 15
		added := player.AddInventory("Bouteille de Kambucha alcoolis√© √† 2%", 1)
		if added {
			fmt.Println("R√©compense : +15 pi√®ces et 1x Bouteille de Kambucha alcoolis√© √† 2% ajout√© √† l'inventaire (soigne 30PV).")
		} else {
			// si inventaire plein, on donne argent √† la place
			player.Argent += 0
			fmt.Println("Ton inventaire √©tait plein : la r√©compense 'Bouteille de Kambucha' n'a pas pu √™tre ajout√©e.")
			fmt.Println("Tu as quand m√™me re√ßu +15 pi√®ces.")
		}
	}
}

// -------------------- Pr√©sentation des persos c√¥te √† c√¥te --------------------

func ChooseCharacter() Character {
	personnages := CreateCharacters()

	typewriterPrint("\nüë© Marie : Enfin ! Te voil√† √† l'accueil.", 40*time.Millisecond, "\033[1;35m")
	typewriterPrint("üë© Lisa : Choisis vite ton personnage avant qu'il ne soit trop tard !", 40*time.Millisecond, "\033[1;34m")

	fmt.Println("\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ Pr√©sentation des personnages ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
	// ligne de noms (quadrillage simple)
	fmt.Printf("+-----------------+-----------------+-----------------+\n")
	fmt.Printf("| %-15s | %-15s | %-15s |\n", personnages[0].Nom, personnages[1].Nom, personnages[2].Nom)
	fmt.Printf("| %-15s | %-15s | %-15s |\n", "Classe: "+personnages[0].Classe, "Classe: "+personnages[1].Classe, "Classe: "+personnages[2].Classe)
	fmt.Printf("| PV: %-10d | PV: %-10d | PV: %-10d |\n", personnages[0].Pv, personnages[1].Pv, personnages[2].Pv)
	fmt.Printf("| ATK: %-8d | ATK: %-8d | ATK: %-8d |\n", personnages[0].Attaque, personnages[1].Attaque, personnages[2].Attaque)
	fmt.Printf("+-----------------+-----------------+-----------------+\n")

	// Afficher un par un en d√©tails (d√©filement)
	for i, perso := range personnages {
		typewriterPrint(fmt.Sprintf("\nD√©couvrons le personnage [%d] : %s", i+1, perso.Nom), 30*time.Millisecond, "\033[35m")
		perso.DisplayInfo()
		fmt.Println("------------------------------------------------")
		time.Sleep(900 * time.Millisecond)
	}

	var choix int
	for {
		fmt.Print("‚û°Ô∏è  Entre le num√©ro (1/2/3) de ton personnage : ")
		fmt.Scan(&choix)
		if choix >= 1 && choix <= len(personnages) {
			break
		}
		fmt.Println("‚ùå Choix invalide.")
	}

	// permet au joueur de choisir un nom
	return characterCreation(personnages[choix-1])
}

// -------------------- Menu Principal --------------------

func (p *Character) StartMenu() {
	const (
		yellowBold = "\033[1;33m"
		green      = "\033[32m"
		reset      = "\033[0m"
	)
	for {
		fmt.Println()
		fmt.Print(yellowBold)
		fmt.Println("‚ñÅ ‚ñÇ ‚ñÑ ‚ñÖ ‚ñÜ ‚ñá ‚ñà  Menu Principal  ‚ñà ‚ñá ‚ñÜ ‚ñÖ ‚ñÑ ‚ñÇ ‚ñÅ")
		fmt.Print(reset)

		fmt.Print(green)
		fmt.Println("\t1 - Afficher infos personnage")
		fmt.Println("\t2 - Inventaire")
		fmt.Println("\t3 - Marchand du Campus")
		fmt.Println("\t4 - Forgeron")
		fmt.Println("\t5 - Combat d'entra√Ænement (ClasseInfobug√©)")
		fmt.Println("\t0 - Quitter")
		fmt.Print(reset)

		fmt.Print("Choix : ")

		var choix int
		fmt.Scan(&choix)

		switch choix {
		case 1:
			p.DisplayInfo()
		case 2:
			p.AccessInventoryMenu()
		case 3:
			p.MerchantMenu()
		case 4:
			p.BlacksmithMenu()
		case 5:
			TrainingFight(p)
		case 0:
			fmt.Println("Au revoir !")
			return
		default:
			fmt.Println("Choix invalide")
		}
	}
}

// -------------------- Main --------------------

func main() {
	rand.Seed(time.Now().UnixNano())
	introduction()

	player := ChooseCharacter()
	fmt.Println("\n‚úÖ Tu as choisi ton h√©ros !")
	player.DisplayInfo()

	player.StartMenu()
}
