package main

import (
	"fmt"
	"math/rand"
)

// √âtat de progression des boss
var bossProgression = [5]bool{false, false, false, false, false}

// -------------------- Combat principal --------------------
func TrainingFight(p *Character) {
	for {
		// Si le dernier boss a √©t√© vaincu, on arr√™te le jeu et on affiche la narration
		if bossProgression[4] { // Le boss Marocain Start-Up est vaincu
			// Affichage de la narration finale
			fmt.Println("\nüéâ F√©licitations !")
			fmt.Println("Vous avez r√©ussi √† vaincre le Marocain Start-Up, le dernier obstacle de l'√©cole.")
			fmt.Println("Le syst√®me de l'√©cole est maintenant d√©bugu√©, et vous avez le dipl√¥me en main.")
			fmt.Println("Vous accedez au toit de l'√©cole, o√π un h√©licopt√®re vous attend.")
			fmt.Println("Avec votre dipl√¥me, vous √™tes pr√™t √† affronter de nouveaux d√©fis, √† d√©buguer le monde entier !")
			fmt.Println("Merci d'avoir jou√© ! Le jeu est termin√©.")
			return // On arr√™te ici la fonction et on ne retourne pas au menu des boss
		}

		// Affichage du menu des boss
		fmt.Println("\nüèÜ Choisis ton boss :")
		if !bossProgression[0] {
			fmt.Println("1 - Classe Infobug√© (niveau 1)")
		} else {
			fmt.Println("1 - Classe Infobug√© ‚úÖ")
		}

		if bossProgression[0] && !bossProgression[1] {
			fmt.Println("2 - Le Contr√¥leur RATP (niveau 2)")
		} else if bossProgression[1] {
			fmt.Println("2 - Le Contr√¥leur RATP ‚úÖ")
		}

		if bossProgression[1] && !bossProgression[2] {
			fmt.Println("3 - Les deux fr√®res Khabil (niveau 3)")
		} else if bossProgression[2] {
			fmt.Println("3 - Les deux fr√®res Khabil ‚úÖ")
		}

		if bossProgression[2] && !bossProgression[3] {
			fmt.Println("4 - Lucas et les Archi (niveau 4)")
		} else if bossProgression[3] {
			fmt.Println("4 - Lucas et les Archi ‚úÖ")
		}

		if bossProgression[3] && !bossProgression[4] {
			fmt.Println("5 - Marocain Start-Up (niveau 5)")
		} else if bossProgression[4] {
			fmt.Println("5 - Marocain Start-Up ‚úÖ")
		}

		fmt.Println("0 - Retour")
		fmt.Print("Choix : ")
		var choix int
		fmt.Scan(&choix)

		switch choix {
		case 1:
			if bossProgression[0] {
				fmt.Println("‚úÖ Boss d√©j√† vaincu.")
			} else {
				startCombat(p, Monster{"Classe Infobug√©", 120, 120, 10}, 0, 50)
			}
		case 2:
			if !bossProgression[0] {
				fmt.Println("‚ùå Tu dois d'abord vaincre le boss pr√©c√©dent.")
			} else if bossProgression[1] {
				fmt.Println("‚úÖ Boss d√©j√† vaincu.")
			} else {
				startCombat(p, Monster{"Le Contr√¥leur RATP", 200, 200, 20}, 1, 100)
			}
		case 3:
			if !bossProgression[1] {
				fmt.Println("‚ùå Tu dois d'abord vaincre le boss pr√©c√©dent.")
			} else if bossProgression[2] {
				fmt.Println("‚úÖ Boss d√©j√† vaincu.")
			} else {
				startCombat(p, Monster{"Les deux fr√®res Khabil", 350, 350, 30}, 2, 150)
			}
		case 4:
			if !bossProgression[2] {
				fmt.Println("‚ùå Tu dois d'abord vaincre le boss pr√©c√©dent.")
			} else if bossProgression[3] {
				fmt.Println("‚úÖ Boss d√©j√† vaincu.")
			} else {
				startCombat(p, Monster{"Lucas et les Archi", 500, 500, 40}, 3, 200)
			}
		case 5:
			if !bossProgression[3] {
				fmt.Println("‚ùå Tu dois d'abord vaincre le boss pr√©c√©dent.")
			} else if bossProgression[4] {
				fmt.Println("‚úÖ Boss d√©j√† vaincu.")
			} else {
				startCombat(p, Monster{"Marocain Start-Up", 700, 700, 50}, 4, 300)
			}
		case 0:
			return
		default:
			fmt.Println("‚ùå Choix invalide.")
		}
	}
}

// Fonction qui affiche une barre de vie esth√©tique
func afficherBarreDeVie(nom string, pv, pvMax int) {
	barre := "["
	percent := (pv * 100) / pvMax
	for i := 0; i < 20; i++ {
		if i < (percent / 5) {
			barre += "‚ñà"
		} else {
			barre += " "
		}
	}
	barre += "]"
	fmt.Printf("%s %s %d/%d %s\n", nom, barre, pv, pvMax, fmt.Sprintf("(%d%%)", percent))
}

// Fonction qui lance le combat avec un boss
func startCombat(p *Character, m Monster, bossIndex int, reward int) {
	fmt.Printf("\n‚öîÔ∏è  Combat contre %s ! (%d PV, %d ATK)\n", m.Nom, m.Pv, m.Attaque)

	p.Tour = 1
	if p.HasAsicsEffect {
		fmt.Println("üëü Effet Asics activ√© : Le boss est paralys√© ce tour.")
	} else {
		p.Tour = 0
	}

	// D√©but du combat
	for p.Pv > 0 && m.Pv > 0 {
		// Affichage de la barre de vie esth√©tique pour le joueur et le monstre
		afficherBarreDeVie(p.Nom, p.Pv, p.PvMax)
		afficherBarreDeVie(m.Nom, m.Pv, m.PvMax)

		// Si on combat les fr√®res Khabil, il y a une chance sur 4 de d√©clencher la fl√ªte de Gasba
		if m.Nom == "Les deux fr√®res Khabil" && rand.Intn(4) == 1 {
			fmt.Println("üé∂ Fl√ªte de Gasba activ√©e ! Tu es endormi pendant un tour...")
			p.Tour = 0 // Le joueur est endormi pendant ce tour et ne pourra pas attaquer
		}

		// Affichage du statut de combat
		fmt.Printf("\nTour %d - %s: %d/%d PV | %s: %d/%d PV\n", p.Tour, p.Nom, p.Pv, p.PvMax, m.Nom, m.Pv, m.PvMax)
		fmt.Println("1 - Attaquer")
		fmt.Println("2 - Inventaire")
		fmt.Println("3 - Abandonner")
		fmt.Print("Choix : ")
		var choix int
		fmt.Scan(&choix)

		switch choix {
		case 1:
			// Appliquer les effets des capacit√©s sp√©ciales avant de calculer les d√©g√¢ts
			dmg := p.Attaque

			// Effet du Trackeur (1 chance sur 3 de doubler les d√©g√¢ts)
			if p.Nom == "Le Trackeur" && rand.Intn(3) == 1 {
				dmg *= 2
				fmt.Println("‚ö° KAMEAMEAMEAMEA ! Attaque doubl√©e !")
			}

			// Bonus de l'Ing√©nieur
			if p.Nom == "L'Ing√©nieur" {
				dmg += 10
			}

			// Casquette Gucci active ?
			if p.Equipement.Tete == "Casquette Gucci" {
				if !p.CasquetteActive {
					p.CasquetteDelay--
					if p.CasquetteDelay <= 0 {
						p.CasquetteActive = true
						fmt.Println("üß¢ Casquette Gucci activ√©e ! +20% d'attaque.")
					}
				}
				if p.CasquetteActive {
					bonus := int(float64(dmg) * 0.20)
					dmg += bonus
				}
			}

			// Calcul des d√©g√¢ts
			fmt.Printf("üó°Ô∏è  Tu infliges %d d√©g√¢ts √† %s !\n", dmg, m.Nom)
			m.Pv -= dmg
			if m.Pv < 0 {
				m.Pv = 0
			}
		case 2:
			p.AccessInventoryMenu()
			continue
		case 3:
			fmt.Println("üö™ Tu as abandonn√© le combat.")
			return
		default:
			fmt.Println("‚ùå Choix invalide.")
			continue
		}

		// Application du poison (si applicable)
		if p.TempBoostTurns > 0 {
			p.TempBoostTurns--
			if p.TempBoostTurns == 0 {
				p.Attaque -= p.TempAttackBoost
				p.TempAttackBoost = 0
				fmt.Println("üß™ Fin de l'effet du Coca.")
			}
		}

		// Tour du boss
		if p.HasAsicsEffect && p.Tour == 0 {
			fmt.Println("‚è≥ Le boss reprend ses esprits...")
		} else if m.Pv > 0 {
			fmt.Printf("üí• %s t'attaque et inflige %d d√©g√¢ts.\n", m.Nom, m.Attaque)
			p.Pv -= m.Attaque
			if p.Pv < 0 {
				p.Pv = 0
			}
		}
		p.Tour++
	}

	if p.Pv <= 0 {
		fmt.Println("üíÄ Tu as √©t√© vaincu...")
	} else {
		fmt.Printf("üéâ Tu as vaincu %s !\n", m.Nom)
		bossProgression[bossIndex] = true

		// R√©compense en argent
		p.Argent += reward
		fmt.Printf("üí∞ Tu as gagn√© %d¬£ !\n", reward)

		// R√©compense sp√©ciale pour boss 2
		if m.Nom == "Le Contr√¥leur RATP" {
			if !p.HasItem("Flow du Contr√¥leur RATP") {
				p.AddItem("Flow du Contr√¥leur RATP")
				fmt.Println("üéÅ Tu as obtenu le Flow du Contr√¥leur RATP !")
			}
		}
	}
}
